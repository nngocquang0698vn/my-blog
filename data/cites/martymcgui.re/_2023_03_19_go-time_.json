{
  "type" : [ "h-entry" ],
  "properties" : {
    "name" : [ "Go Time" ],
    "category" : [ "hugo", "webdev", "time", "parsing", "microformats" ],
    "url" : [ "https://martymcgui.re/2023/03/19/go-time/" ],
    "published" : [ "2023-03-19T13:14:22-0400" ],
    "content" : [ {
      "html" : "<p>This is one of those posts about a tech issue comes up from time to time for me that I find difficult to search for. Sorry (not sorry) if it is not helpful to anyone else!</p>\n<h2>\n  Too much context about my site building process\n  <br>\n</h2>\n<p>My site is built with <a href=\"https://gohugo.io/\">Hugo</a>, a static site generator known for being quite fast, and with a powerful (and challenging) templating system.</p>\n<p>I use my site for lots of stuff, which sometimes means showing content from <em>other sites</em> in my posts. For example:</p>\n<ul>\n  <li>\n    Responses that I make to other folks, like <a href=\"https://martymcgui.re/2019/10/02/232911/\">reposting this RSVP</a>, or <a href=\"https://martymcgui.re/2021/03/01/165355/\">replying to this post</a>. My site tries to make a little preview of these, sometimes known as a <a href=\"https://indieweb.org/reply-context\">reply context</a>.\n    <br>\n  </li>\n  <li>\n    <a href=\"https://indieweb.org/responses#Individual_sets_of_responses\">Responses</a> <em>from</em> other folks, like <a href=\"https://martymcgui.re/2023/01/18/223130/\">this little piece of a conversation with a person on Mastodon</a>. These come in the form of <a href=\"https://indieweb.org/Webmention\">Webmentions</a>, and my site needs to know info about how to display them.\n  </li>\n</ul>\nIn either case, my site's build process includes a step where it finds new links that need this context - to be displayed as a preview or displayed as a like/comment/etc., and it fetches that stuff. To do this, my site fetches the link content, then parses it using a handy library called <a href=\"https://github.com/aaronpk/XRay\">aaronpk/XRay</a>, then saving it in a place where Hugo can find it at build time.\n<p>For example, the RSVP post I mentioned gets a little chunk of data like this:</p>\n<pre>\n{\n  \"fetched_at\": \"2019-10-02T23:29:15-04:00\",\n  \"xray\": {\n    \"data\": {\n      \"type\": \"entry\",\n      <strong>\"published\": \"2019-10-02 19:53-0700\",</strong>\n      \"url\": \"https://tantek.com/2019/275/t1/indiewebcamp-new-york-city\",\n      \"content\": {\n        \"text\": \"going to #IndieWebCamp NYC this weekend ...\",\n...\n</pre>\n<p>Iâ€™ve cut out a lot of stuff here and highlighted the two things relevant for my particular time issue.</p>\n<p>In my templates for previews and responses I try to show the <strong>published</strong> time from the post itself. If XRay wasn't able to find a value for <strong>published</strong> or (spoiler) Hugo can't parse that value as a time, the template will give up and omit the published time.</p>\n<h2>\n  What is Web Time?\n</h2>\n<p>This is such a ridiculously fraught question that I refuse to answer it properly. Suffice to say:</p>\n<ul>\n  <li>\n    <a href=\"http://microformats.org/wiki/h-entry#dt-published_property_and_HTML5_time_element\">IndieWeb-friendly posts tend to include their<strong> published</strong> time</a>\n    in <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats\">(a variant of?) ISO 8601 format</a>. I'll leave learning about ISO 8601 as an exercise for the reader. It's pretty forgiving, and let's you do things like <a href=\"https://en.wikipedia.org/wiki/Artificial_precision\">avoid artificial precision</a> by omitting things like seconds when they're not known.\n  </li>\n  <li>Hugo... doesn't do this.</li>\n</ul>\n<h2>What is (Hu)go Time?</h2>\n<p>\n  Okay, finally, the point of this post has been found. To archive this lil' set of facts for my future frustrations.\n</p>\n<p>From an <a href=\"https://github.com/gohugoio/hugo/issues/5340#issuecomment-431698120\">unrelated Hugo date parsing issue</a>, I learned about <a href=\"https://github.com/spf13/cast/blob/557a6a2fb72b0b1ffc57875f299e7842351886f6/caste.go#L1407\">the list of time formats that Hugo tries when you ask it to parse something as a time</a>, last updated August 2022:</p>\n<pre>\nvar (\n  timeFormats = []timeFormat{\n    {time.RFC3339, timeFormatNumericTimezone},\n    {\"2006-01-02T15:04:05\", timeFormatNoTimezone}, // iso8601 without timezone\n    {time.RFC1123Z, timeFormatNumericTimezone},\n    {time.RFC1123, timeFormatNamedTimezone},\n    {time.RFC822Z, timeFormatNumericTimezone},\n    {time.RFC822, timeFormatNamedTimezone},\n    {time.RFC850, timeFormatNamedTimezone},\n    {\"2006-01-02 15:04:05.999999999 -0700 MST\", timeFormatNumericAndNamedTimezone}, // Time.String()\n    {\"2006-01-02T15:04:05-0700\", timeFormatNumericTimezone}, // RFC3339 without timezone hh:mm colon\n    {\"2006-01-02 15:04:05Z0700\", timeFormatNumericTimezone}, // RFC3339 without T or timezone hh:mm colon\n    {\"2006-01-02 15:04:05\", timeFormatNoTimezone},\n    {time.ANSIC, timeFormatNoTimezone},\n    {time.UnixDate, timeFormatNamedTimezone},\n    {time.RubyDate, timeFormatNumericTimezone},\n    {\"2006-01-02 15:04:05Z07:00\", timeFormatNumericTimezone},\n    {\"2006-01-02\", timeFormatNoTimezone},\n    {\"02 Jan 2006\", timeFormatNoTimezone},\n    {\"2006-01-02 15:04:05 -07:00\", timeFormatNumericTimezone},\n    {\"2006-01-02 15:04:05 -0700\", timeFormatNumericTimezone},\n    {time.Kitchen, timeFormatTimeOnly},\n    {time.Stamp, timeFormatTimeOnly},\n    {time.StampMilli, timeFormatTimeOnly},\n    {time.StampMicro, timeFormatTimeOnly},\n    {time.StampNano, timeFormatTimeOnly},\n  }\n)\n</pre>\n<p>\n  There's a lot of <strong>time.Whatever</strong> constants in that list. These are part of the \n  <a href=\"https://pkg.go.dev/time\">Go language's <strong>time</strong> package</a>\n  :\n</p>\n<pre>\nconst (\n  Layout = \"01/02 03:04:05PM '06 -0700\" // The reference time, in numerical order.\n  ANSIC = \"Mon Jan _2 15:04:05 2006\"\n  UnixDate = \"Mon Jan _2 15:04:05 MST 2006\"\n  RubyDate = \"Mon Jan 02 15:04:05 -0700 2006\"\n  RFC822 = \"02 Jan 06 15:04 MST\"\n  RFC822Z = \"02 Jan 06 15:04 -0700\" // RFC822 with numeric zone\n  RFC850 = \"Monday, 02-Jan-06 15:04:05 MST\"\n  RFC1123 = \"Mon, 02 Jan 2006 15:04:05 MST\"\n  RFC1123Z = \"Mon, 02 Jan 2006 15:04:05 -0700\" // RFC1123 with numeric zone\n  RFC3339 = \"2006-01-02T15:04:05Z07:00\"\n  RFC3339Nano = \"2006-01-02T15:04:05.999999999Z07:00\"\n  Kitchen = \"3:04PM\"\n  // Handy time stamps.\n  Stamp = \"Jan _2 15:04:05\"\n  StampMilli = \"Jan _2 15:04:05.000\"\n  StampMicro = \"Jan _2 15:04:05.000000\"\n  StampNano = \"Jan _2 15:04:05.000000000\"\n  DateTime = \"2006-01-02 15:04:05\"\n  DateOnly = \"2006-01-02\"\n  TimeOnly = \"15:04:05\"\n)\n</pre>\n<p>\n  If your brain just can't help but puzzle-solve, you may have noticed that the <strong>published</strong> time from the example above: \n</p>\n<pre>\n\"2019-10-02 19:53-0700\"\n</pre>\n  <p>Is <em>close to</em> but <em>does not match</em> either the <strong>time.RFC3339</strong> or <strong>time.DateTime</strong> formats.</p>\n  <p>The issue? Neither Hugo nor Go fully support ISO 8601 time, instead supporting <em>very close</em> time formats which <em>do not allow omitting the seconds value.</em> There are definitely other formats they don't support, which I've seen commonly, like \"January 2, 2006\".</p>\n  <h2>\n    Workaround (Deprecated)\n  </h2>\n  <p>\n    When I first built out the Hugo templates for my site (2018, so back in the 0.4x or 0.5x days, maybe?), if you asked Hugo to parse a time, and it couldn't, it would give you back a string instead with an error message beginning \"unable to parse date: ...\". This was gnarly, but I could code around it by asking Hugo to convert a value to a time and checking if the result starts with \"unable to parse\". Something like:\n  </p>\n<pre>\n{{ $safe_published := (time $item_published) -}}\n{{ if not (hasPrefix $safe_start \"unable to parse\") -}}\n  {{/* ... it parsed, hooray, use it */}}\n{{ else -}}\n  {{/* failed to parse so do a fallback or ignore it or whatever */}}\n{{ end -}}\n</pre>\n  <p>\n    Time passes and Hugo has since changed this behavior. Now, if you ask it to convert a value to a time, and it cannot parse it with one of the known format strings, \n    <em><strong>Hugo bails and the entire build fails.</strong></em>\n    It throws an error something like:\n  </p>\n<pre>\nERROR 2023/03/19 13:02:05 render of \"page\" failed:\n  \"/home/schmarty/me/martymcgui.re/themes/mmgre-2015/layouts/_default/single.html:3:7\":\n  execute of template failed: template: _default/single.html:3:7:\n  executing \"main\" at &lt;partial \"post/post.html\" (...)&gt;:\n  error calling partial: \"/home/schmarty/me/martymcgui.re/themes/mmgre-2015/layouts/partials/post/post.html:20:36\":\n  execute of template failed: template: partials/post/post.html:20:36:\n  executing \"partials/post/post.html\" at &lt;partial \"link-preview/link-preview.html\" (...)&gt;:\n  error calling partial: \"/home/schmarty/me/martymcgui.re/themes/mmgre-2015/layouts/partials/link-preview/link-preview.html:26:9\":\n  execute of template failed: template: partials/link-preview/link-preview.html:26:9:\n  executing \"partials/link-preview/link-preview.html\" at &lt;partial (printf \"link-preview/%s.html\" \"xray\") (...)&gt;:\n  error calling partial: \"/home/schmarty/me/martymcgui.re/themes/mmgre-2015/layouts/partials/link-preview/xray.html:30:28\":\n  execute of template failed: template: partials/link-preview/xray.html:30:28:\n  executing \"partials/link-preview/xray.html\" at &lt;partial \"util/safe-time.html\" $item.published&gt;:\n  error calling partial: \"/home/schmarty/me/martymcgui.re/themes/mmgre-2015/layouts/partials/util/safe-time.html:1:4\":\n  execute of template failed: template: partials/util/safe-time.html:1:4:\n  executing \"partials/util/safe-time.html\" at &lt;time .&gt;:\n  <strong> error calling time: unable to parse date: 2019-10-02 19:53-0700</strong>\n</pre>\n  <p>\n    Believe it or not I actually cleaned up that error a lot, removed duplicates, and highlighted the key issue in bold.\n  </p>\n  <p>\n    <em><strong>I hate this.</strong></em>\n  </p>\n  <h2>Workaround (Derogatory)</h2>\n  <p>For now I check my site's build logs from time to time looking for build errors like the one above. I'll then:</p><ol>\n    <li>Use a tool like grep to search my saved reply context data for the problematic time string (in this case \"2019-10-02 19:53-0700\").\n    </li><li>Find the file it's in, and \"fix\" it so Hugo can parse it. In this case, \"2019-10-02 19:53:00-0700\".\n    </li><li>With the \"fix\" in place, I'll rebuild the site.\n    </li></ol>\n  <p>Either it builds successfully (hooray!) or I find the <em>next</em> time parsing failure and repeat.</p>\n  <p>\n    <em><strong>I seriously dislike this.</strong></em>\n  </p>\n  <h2>A Future Fix</h2>\n  <p>What I actually need to do here is update my build system to sanitize the value of <strong>published</strong> if it exists.</p>\n  <p>Like Hugo's list, I'll need to decide what date string formats I want to support, have the build system try them all on that <strong>published</strong> value, and store a sanitized version for Hugo.</p>\n  <p>\n    Okay! Now I have this post to refer to in the future when I get next get cranky about this.\n    <br>\n  </p>",
      "value" : "This is one of those posts about a tech issue comes up from time to time for me that I find difficult to search for. Sorry (not sorry) if it is not helpful to anyone else! Too much context about my site building process\n\nMy site is built with Hugo, a static site generator known for being quite fast, and with a powerful (and challenging) templating system.\nI use my site for lots of stuff, which sometimes means showing content from other sites in my posts. For example: Responses that I make to other folks, like reposting this RSVP, or replying to this post. My site tries to make a little preview of these, sometimes known as a reply context.\nResponses from other folks, like this little piece of a conversation with a person on Mastodon. These come in the form of Webmentions, and my site needs to know info about how to display them. In either case, my site's build process includes a step where it finds new links that need this context - to be displayed as a preview or displayed as a like/comment/etc., and it fetches that stuff. To do this, my site fetches the link content, then parses it using a handy library called aaronpk/XRay, then saving it in a place where Hugo can find it at build time.\nFor example, the RSVP post I mentioned gets a little chunk of data like this: { \"fetched_at\": \"2019-10-02T23:29:15-04:00\", \"xray\": { \"data\": { \"type\": \"entry\", \"published\": \"2019-10-02 19:53-0700\", \"url\": \"https://tantek.com/2019/275/t1/indiewebcamp-new-york-city\", \"content\": { \"text\": \"going to #IndieWebCamp NYC this weekend ...\", ...\nIâ€™ve cut out a lot of stuff here and highlighted the two things relevant for my particular time issue.\nIn my templates for previews and responses I try to show the published time from the post itself. If XRay wasn't able to find a value for published or (spoiler) Hugo can't parse that value as a time, the template will give up and omit the published time. What is Web Time?\nThis is such a ridiculously fraught question that I refuse to answer it properly. Suffice to say: IndieWeb-friendly posts tend to include their published time in (a variant of?) ISO 8601 format. I'll leave learning about ISO 8601 as an exercise for the reader. It's pretty forgiving, and let's you do things like avoid artificial precision by omitting things like seconds when they're not known. Hugo... doesn't do this. What is (Hu)go Time?\nOkay, finally, the point of this post has been found. To archive this lil' set of facts for my future frustrations.\nFrom an unrelated Hugo date parsing issue, I learned about the list of time formats that Hugo tries when you ask it to parse something as a time, last updated August 2022: var ( timeFormats = []timeFormat{ {time.RFC3339, timeFormatNumericTimezone}, {\"2006-01-02T15:04:05\", timeFormatNoTimezone}, // iso8601 without timezone {time.RFC1123Z, timeFormatNumericTimezone}, {time.RFC1123, timeFormatNamedTimezone}, {time.RFC822Z, timeFormatNumericTimezone}, {time.RFC822, timeFormatNamedTimezone}, {time.RFC850, timeFormatNamedTimezone}, {\"2006-01-02 15:04:05.999999999 -0700 MST\", timeFormatNumericAndNamedTimezone}, // Time.String() {\"2006-01-02T15:04:05-0700\", timeFormatNumericTimezone}, // RFC3339 without timezone hh:mm colon {\"2006-01-02 15:04:05Z0700\", timeFormatNumericTimezone}, // RFC3339 without T or timezone hh:mm colon {\"2006-01-02 15:04:05\", timeFormatNoTimezone}, {time.ANSIC, timeFormatNoTimezone}, {time.UnixDate, timeFormatNamedTimezone}, {time.RubyDate, timeFormatNumericTimezone}, {\"2006-01-02 15:04:05Z07:00\", timeFormatNumericTimezone}, {\"2006-01-02\", timeFormatNoTimezone}, {\"02 Jan 2006\", timeFormatNoTimezone}, {\"2006-01-02 15:04:05 -07:00\", timeFormatNumericTimezone}, {\"2006-01-02 15:04:05 -0700\", timeFormatNumericTimezone}, {time.Kitchen, timeFormatTimeOnly}, {time.Stamp, timeFormatTimeOnly}, {time.StampMilli, timeFormatTimeOnly}, {time.StampMicro, timeFormatTimeOnly}, {time.StampNano, timeFormatTimeOnly}, } )\nThere's a lot of time.Whatever constants in that list. These are part of the Go language's time package : const ( Layout = \"01/02 03:04:05PM '06 -0700\" // The reference time, in numerical order. ANSIC = \"Mon Jan _2 15:04:05 2006\" UnixDate = \"Mon Jan _2 15:04:05 MST 2006\" RubyDate = \"Mon Jan 02 15:04:05 -0700 2006\" RFC822 = \"02 Jan 06 15:04 MST\" RFC822Z = \"02 Jan 06 15:04 -0700\" // RFC822 with numeric zone RFC850 = \"Monday, 02-Jan-06 15:04:05 MST\" RFC1123 = \"Mon, 02 Jan 2006 15:04:05 MST\" RFC1123Z = \"Mon, 02 Jan 2006 15:04:05 -0700\" // RFC1123 with numeric zone RFC3339 = \"2006-01-02T15:04:05Z07:00\" RFC3339Nano = \"2006-01-02T15:04:05.999999999Z07:00\" Kitchen = \"3:04PM\" // Handy time stamps. Stamp = \"Jan _2 15:04:05\" StampMilli = \"Jan _2 15:04:05.000\" StampMicro = \"Jan _2 15:04:05.000000\" StampNano = \"Jan _2 15:04:05.000000000\" DateTime = \"2006-01-02 15:04:05\" DateOnly = \"2006-01-02\" TimeOnly = \"15:04:05\" )\nIf your brain just can't help but puzzle-solve, you may have noticed that the published time from the example above: \"2019-10-02 19:53-0700\"\nIs close to but does not match either the time.RFC3339 or time.DateTime formats.\nThe issue? Neither Hugo nor Go fully support ISO 8601 time, instead supporting very close time formats which do not allow omitting the seconds value. There are definitely other formats they don't support, which I've seen commonly, like \"January 2, 2006\". Workaround (Deprecated)\nWhen I first built out the Hugo templates for my site (2018, so back in the 0.4x or 0.5x days, maybe?), if you asked Hugo to parse a time, and it couldn't, it would give you back a string instead with an error message beginning \"unable to parse date: ...\". This was gnarly, but I could code around it by asking Hugo to convert a value to a time and checking if the result starts with \"unable to parse\". Something like: {{ $safe_published := (time $item_published) -}} {{ if not (hasPrefix $safe_start \"unable to parse\") -}} {{/* ... it parsed, hooray, use it */}} {{ else -}} {{/* failed to parse so do a fallback or ignore it or whatever */}} {{ end -}}\nTime passes and Hugo has since changed this behavior. Now, if you ask it to convert a value to a time, and it cannot parse it with one of the known format strings, Hugo bails and the entire build fails. It throws an error something like: ERROR 2023/03/19 13:02:05 render of \"page\" failed: \"/home/schmarty/me/martymcgui.re/themes/mmgre-2015/layouts/_default/single.html:3:7\": execute of template failed: template: _default/single.html:3:7: executing \"main\" at <partial \"post/post.html\" (...)>: error calling partial: \"/home/schmarty/me/martymcgui.re/themes/mmgre-2015/layouts/partials/post/post.html:20:36\": execute of template failed: template: partials/post/post.html:20:36: executing \"partials/post/post.html\" at <partial \"link-preview/link-preview.html\" (...)>: error calling partial: \"/home/schmarty/me/martymcgui.re/themes/mmgre-2015/layouts/partials/link-preview/link-preview.html:26:9\": execute of template failed: template: partials/link-preview/link-preview.html:26:9: executing \"partials/link-preview/link-preview.html\" at <partial (printf \"link-preview/%s.html\" \"xray\") (...)>: error calling partial: \"/home/schmarty/me/martymcgui.re/themes/mmgre-2015/layouts/partials/link-preview/xray.html:30:28\": execute of template failed: template: partials/link-preview/xray.html:30:28: executing \"partials/link-preview/xray.html\" at <partial \"util/safe-time.html\" $item.published>: error calling partial: \"/home/schmarty/me/martymcgui.re/themes/mmgre-2015/layouts/partials/util/safe-time.html:1:4\": execute of template failed: template: partials/util/safe-time.html:1:4: executing \"partials/util/safe-time.html\" at <time .>: error calling time: unable to parse date: 2019-10-02 19:53-0700\nBelieve it or not I actually cleaned up that error a lot, removed duplicates, and highlighted the key issue in bold.\nI hate this. Workaround (Derogatory)\nFor now I check my site's build logs from time to time looking for build errors like the one above. I'll then: Use a tool like grep to search my saved reply context data for the problematic time string (in this case \"2019-10-02 19:53-0700\"). Find the file it's in, and \"fix\" it so Hugo can parse it. In this case, \"2019-10-02 19:53:00-0700\". With the \"fix\" in place, I'll rebuild the site.\nEither it builds successfully (hooray!) or I find the next time parsing failure and repeat.\nI seriously dislike this. A Future Fix\nWhat I actually need to do here is update my build system to sanitize the value of published if it exists.\nLike Hugo's list, I'll need to decide what date string formats I want to support, have the build system try them all on that published value, and store a sanitized version for Hugo.\nOkay! Now I have this post to refer to in the future when I get next get cranky about this.",
      "lang" : "en"
    } ],
    "author" : [ {
      "type" : [ "h-card" ],
      "properties" : {
        "name" : [ "Marty McGuire" ],
        "photo" : [ {
          "value" : "https://martymcgui.re/images/logo.jpg",
          "alt" : "Marty McGuire"
        } ],
        "url" : [ "https://martymcgui.re/" ]
      },
      "lang" : "en",
      "value" : "https://martymcgui.re/"
    } ]
  },
  "lang" : "en"
}
