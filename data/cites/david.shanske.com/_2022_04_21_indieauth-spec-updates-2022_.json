{
  "type" : [ "h-entry" ],
  "properties" : {
    "name" : [ "IndieAuth Spec Updates 2022" ],
    "url" : [ "https://david.shanske.com/2022/04/21/indieauth-spec-updates-2022/" ],
    "syndication" : [ "https://news.indieweb.org/en/david.shanske.com/2022/04/21/indieauth-spec-updates-2022/", "https://twitter.com/dshanske/status/1517168901976727553", "https://micro.blog/dshanske/12729173" ],
    "published" : [ "2022-04-21T11:47:38-04:00" ],
    "updated" : [ "2022-04-21T12:07:50-04:00" ],
    "content" : [ {
      "html" : "Over the course of 2021, the IndieWeb community had several popup sessions to continue the refining of the <a href=\"https://indieauth.spec.indieweb.org/\">spec</a>. This culminated in a release of the latest iteration on February 22, 2022.\n<p>I really enjoyed Aaron Parecki&#x2019;s <a href=\"https://aaronparecki.com/2020/12/03/1/indieauth-2020\">post</a> explaining the changes during the 2020 season, and thought I&#x2019;d write my own this time using the same format. I&#x2019;ve been heavily involved in the update, but Aaron is heavily embedded in the OAuth world to a degree I&#x2019;m not, and may have more insights I hope he gets a chance to blog about.</p>\n<p>Many of the changes bring IndieAuth closer to OAuth 2.0, ensuring that an OAuth client could support IndieAuth with a minimum of changes.</p>\n<ul>\n<li><a href=\"https://david.shanske.com/2022/04/21/indieauth-spec-updates-2022/#metadata-discovery\">New Metadata Discovery Method</a></li>\n<li><a href=\"https://david.shanske.com/2022/04/21/indieauth-spec-updates-2022/#iss\">Server Issuer Identifier</a></li>\n<li><a href=\"https://david.shanske.com/2022/04/21/indieauth-spec-updates-2022/#refresh-tokens\">Refresh Tokens</a></li>\n<li><a href=\"https://david.shanske.com/2022/04/21/indieauth-spec-updates-2022/#revocation-endpoint\">New Revocation Endpoint</a></li>\n<li><a href=\"https://david.shanske.com/2022/04/21/indieauth-spec-updates-2022/#token-introspection\">New Token Introspection Endpoint</a></li>\n<li><a href=\"https://david.shanske.com/2022/04/21/indieauth-spec-updates-2022/#userinfo-endpoint\">New User Info Endpoint</a></li>\n<li><a href=\"https://david.shanske.com/2022/04/21/indieauth-spec-updates-2022/#profile\">Clarifications Around Profile</a></li>\n</ul>\n<h2 id=\"metadata-discovery\">Metadata Discovery</h2>\n<p>The first thing an IndieAuth client does is discover the user&#x2019;s endpoints and redirect the user to their server to authorize the client.</p>\n<p>Previously, the client would look for HTTP Link headers for the authorization and token endpoint. As we continue to expand into new use cases, we need a new way to provide information to clients.</p>\n<p>The new metadata object servers publish and clients retrieve not only identifies the location of the various endpoints(some of which are optional), but what the capabilities are of the endpoints.</p>\n<p><strong>Changes for Clients:</strong> Clients must check for a HTTP Link header or an HTML link element with a rel-value of indieauth-metadata. For the foreseeable future, clients should, for backward compatibility, still look for the authorization_endpoint and token_endpoint rel values.</p>\n<p><strong>Changes for Servers</strong>: The server has to publish the link values for the client to find, and at that URL return a JSON object with properties containing information about the various endpoints. You may wish to place it in the <span style=\"text-decoration: underline;\">.well-known</span> path, for compatibility with other OAuth 2.0 implementions, but this is not a requirement.</p>\n<h2 id=\"iss\">Issuer Identifier</h2>\n<p>In order to positively identify differing IndieAuth server, each one will now have a server identifier, indicated by the issuer parameter.&#xA0; It is a prefix of the URL where the Server Metadata endpoint is.</p>\n<p>This can now be checked to protect against attacks, as IndieAuth clients interact with multiple servers.</p>\n<p><strong>Changes for Clients</strong>: Clients must now check that the issuer identifer returned from the authorization endpoint is valid and matches the one provided in Server Metadata.</p>\n<p><strong>Changes for Servers</strong>: When the authorization endpoint builds the redirect back to the client it will include the issuer identifier. The issuer identifier will be provided through the new metadata endpoint.</p>\n<h2 id=\"refresh-tokens\">Refresh Tokens</h2>\n<p>Refresh tokens are something were always permitted in IndieAuth, but people didn&#x2019;t know it was an option because it wasn&#x2019;t described.</p>\n<p><strong>Changes for Clients</strong>: Clients should note whether tokens have an expiry and be prepared to request new tokens using the refresh token process. The new metadata endpoint, if implemented, would advise if a server supported the refresh token grant type. The only negative to not implementing support is that when the token expires, it would be a poor experience for the user to have to reauthenticate.</p>\n<p><strong>Changes for Servers</strong>: Servers are not required to implement short-lived tokens and refresh tokens. But if they choose to, they would have to support the refresh_token grant type in order to allow clients to get new tokens when one expired.</p>\n<h2 id=\"revocation-endpoint\">Revocation Endpoint</h2>\n<p>The previous version of the spec overloaded the token endpoint to provide revocation with the action=revoke parameter.</p>\n<p><strong>Changes for Clients:</strong> Clients should support discovering the new endpoint through the server metadata endpoint and utilizing it.</p>\n<p><strong>Changes for Servers:</strong> Servers may wish to support the old revocation method for backward compatibility for the foreseeable future, but should implement the new endpoint.</p>\n<h2 id='\"token-introspection'>Token Introspection Endpoint</h2>\n<p>This new version introduces the token introspection endpoint, discoverable through the new metadata endpoint. This replaces the previous token verification process with one based on the OAuth 2 Token Introspection process. This means also a change to the response.</p>\n<p>The major difference between this method and the prior one is that the previous method was a GET request, this is a POST, and requires some form of authorization.</p>\n<p><strong>Changes for Clients</strong>: None&#x2026;.the token verification is meant to be done by resource servers, such as a micropub endpoint if not coupled with the IndieAuth endpoints. Some clients may have been using the verification process, and should remove this.</p>\n<p><strong>Changes for Servers</strong>: The introspection endpoint is also optional. The old GET option may be retained for a time, but it is best to discontinue as soon as possible as the previous verification endpoint was not meant to be used by clients.</p>\n<h2 id=\"userinfo-endpoint\">New User Info Endpoint</h2>\n<p>A previous update to the spec added a profile scope and a profile return to the authorization response. This addresses the scenario where a client wishes to refresh that profile information by allowing for an optional user information endpoint, discoverable via the metadata endpoint.</p>\n<p><strong>Changes for Clients:</strong> Clients supported/using profile information should, if a user information endpoint is available may choose to query it periodically for updated information. This would allow for refreshing avatars and display names automatically.</p>\n<p><strong>Changes for Servers</strong>: Implementing a userinfo endpoint is, of course optional. In most cases, if you were returning the profile information in the authorization response, it should be relatively easy to add the endpoint.</p>\n<h2 id=\"profile\">Clarification of Profile and Its Scope</h2>\n<p>There were questions regarding the definition of the return values for the profile information, which were clarified in the update, and more significantly, the application of the profile scope&#x2026;specifically, could you issue a token with only the profile scope and what that would mean.</p>\n<p>The language of the previous update made some individuals believe that a token would not be issued if the request contained only the profile scope. This was clarified.</p>\n<p>If you need a token, you would redeem your authorization code at the token endpoint&#x2026;which would allow you to have a token with just a profile scope&#x2026;which could work well for the new userinfo endpoint. If you don&#x2019;t need a token, just to know the user logged in, you can do the same redemption at the authorization endpoint.</p>\n<p><strong>Change for Clients</strong>: This should be addressed as per use case above. Namely, if you need a token vs not needing one.</p>\n<p><strong>Changes for Servers</strong>: If you implemented this during the prior update, and set it so you could not get a token with a profile only spec, due a misread of the intentions of the specification, you should change this. It shouldn&#x2019;t affect any client.</p>\n<p>&#xA0;</p>",
      "value" : "Over the course of 2021, the IndieWeb community had several popup sessions to continue the refining of the spec. This culminated in a release of the latest iteration on February 22, 2022.\nI really enjoyed Aaron Parecki’s post explaining the changes during the 2020 season, and thought I’d write my own this time using the same format. I’ve been heavily involved in the update, but Aaron is heavily embedded in the OAuth world to a degree I’m not, and may have more insights I hope he gets a chance to blog about.\nMany of the changes bring IndieAuth closer to OAuth 2.0, ensuring that an OAuth client could support IndieAuth with a minimum of changes. New Metadata Discovery Method Server Issuer Identifier Refresh Tokens New Revocation Endpoint New Token Introspection Endpoint New User Info Endpoint Clarifications Around Profile Metadata Discovery\nThe first thing an IndieAuth client does is discover the user’s endpoints and redirect the user to their server to authorize the client.\nPreviously, the client would look for HTTP Link headers for the authorization and token endpoint. As we continue to expand into new use cases, we need a new way to provide information to clients.\nThe new metadata object servers publish and clients retrieve not only identifies the location of the various endpoints(some of which are optional), but what the capabilities are of the endpoints.\nChanges for Clients: Clients must check for a HTTP Link header or an HTML link element with a rel-value of indieauth-metadata. For the foreseeable future, clients should, for backward compatibility, still look for the authorization_endpoint and token_endpoint rel values.\nChanges for Servers: The server has to publish the link values for the client to find, and at that URL return a JSON object with properties containing information about the various endpoints. You may wish to place it in the .well-known path, for compatibility with other OAuth 2.0 implementions, but this is not a requirement. Issuer Identifier\nIn order to positively identify differing IndieAuth server, each one will now have a server identifier, indicated by the issuer parameter.  It is a prefix of the URL where the Server Metadata endpoint is.\nThis can now be checked to protect against attacks, as IndieAuth clients interact with multiple servers.\nChanges for Clients: Clients must now check that the issuer identifer returned from the authorization endpoint is valid and matches the one provided in Server Metadata.\nChanges for Servers: When the authorization endpoint builds the redirect back to the client it will include the issuer identifier. The issuer identifier will be provided through the new metadata endpoint. Refresh Tokens\nRefresh tokens are something were always permitted in IndieAuth, but people didn’t know it was an option because it wasn’t described.\nChanges for Clients: Clients should note whether tokens have an expiry and be prepared to request new tokens using the refresh token process. The new metadata endpoint, if implemented, would advise if a server supported the refresh token grant type. The only negative to not implementing support is that when the token expires, it would be a poor experience for the user to have to reauthenticate.\nChanges for Servers: Servers are not required to implement short-lived tokens and refresh tokens. But if they choose to, they would have to support the refresh_token grant type in order to allow clients to get new tokens when one expired. Revocation Endpoint\nThe previous version of the spec overloaded the token endpoint to provide revocation with the action=revoke parameter.\nChanges for Clients: Clients should support discovering the new endpoint through the server metadata endpoint and utilizing it.\nChanges for Servers: Servers may wish to support the old revocation method for backward compatibility for the foreseeable future, but should implement the new endpoint. Token Introspection Endpoint\nThis new version introduces the token introspection endpoint, discoverable through the new metadata endpoint. This replaces the previous token verification process with one based on the OAuth 2 Token Introspection process. This means also a change to the response.\nThe major difference between this method and the prior one is that the previous method was a GET request, this is a POST, and requires some form of authorization.\nChanges for Clients: None….the token verification is meant to be done by resource servers, such as a micropub endpoint if not coupled with the IndieAuth endpoints. Some clients may have been using the verification process, and should remove this.\nChanges for Servers: The introspection endpoint is also optional. The old GET option may be retained for a time, but it is best to discontinue as soon as possible as the previous verification endpoint was not meant to be used by clients. New User Info Endpoint\nA previous update to the spec added a profile scope and a profile return to the authorization response. This addresses the scenario where a client wishes to refresh that profile information by allowing for an optional user information endpoint, discoverable via the metadata endpoint.\nChanges for Clients: Clients supported/using profile information should, if a user information endpoint is available may choose to query it periodically for updated information. This would allow for refreshing avatars and display names automatically.\nChanges for Servers: Implementing a userinfo endpoint is, of course optional. In most cases, if you were returning the profile information in the authorization response, it should be relatively easy to add the endpoint. Clarification of Profile and Its Scope\nThere were questions regarding the definition of the return values for the profile information, which were clarified in the update, and more significantly, the application of the profile scope…specifically, could you issue a token with only the profile scope and what that would mean.\nThe language of the previous update made some individuals believe that a token would not be issued if the request contained only the profile scope. This was clarified.\nIf you need a token, you would redeem your authorization code at the token endpoint…which would allow you to have a token with just a profile scope…which could work well for the new userinfo endpoint. If you don’t need a token, just to know the user logged in, you can do the same redemption at the authorization endpoint.\nChange for Clients: This should be addressed as per use case above. Namely, if you need a token vs not needing one.\nChanges for Servers: If you implemented this during the prior update, and set it so you could not get a token with a profile only spec, due a misread of the intentions of the specification, you should change this. It shouldn’t affect any client.\n ",
      "lang" : "en-US"
    } ],
    "author" : [ {
      "type" : [ "h-card" ],
      "properties" : {
        "name" : [ "David Shanske" ],
        "photo" : [ "https://david.shanske.com/avatar/dshanske?s=42" ],
        "url" : [ "https://david.shanske.com/" ]
      },
      "lang" : "en-US",
      "value" : "David Shanske"
    } ]
  },
  "lang" : "en-US"
}
