image: docker:1.13-rc
services:
    - docker:1.13-rc-dind

variables:
  CONTAINER_IMAGE_BASE_URL: registry.gitlab.com/jamietanna/jvt.me
  CONTAINER_BUILT_IMAGE: $CONTAINER_IMAGE_BASE_URL:$CI_COMMIT_REF_SLUG
  CONTAINER_BUILDER_IMAGE: $CONTAINER_IMAGE_BASE_URL/builder:$CI_COMMIT_REF_SLUG
  CONTAINER_DEPLOY_IMAGE: $CONTAINER_IMAGE_BASE_URL/deploy:$CI_COMMIT_REF_SLUG
  RELEASE_CONTAINER_BUILT_IMAGE: $CONTAINER_IMAGE_BASE_URL:latest
  RELEASE_CONTAINER_BUILDER_IMAGE: $CONTAINER_IMAGE_BASE_URL/builder:latest
  RELEASE_CONTAINER_DEPLOY_IMAGE: $CONTAINER_IMAGE_BASE_URL/deploy:latest
  DOCKER_DRIVER: overlay
  DOCKER_BASE_IMAGE: alpine:3.5
  STAGING_URL: https://dev.jvt.me
  PRODUCTION_URL: https://jvt.me

stages:
  - build
  - review
  - test
  - deploy
  - release
  - prod_deploy

# Ensure that the site builds {{{
build_image:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # pull the latest base image on a master build
    - '[[ "$CI_BUILD_REF_SLUG" == "master" ]] && docker pull $DOCKER_BASE_IMAGE || true'
    - docker pull $CONTAINER_BUILDER_IMAGE || docker pull $RELEASE_CONTAINER_BUILDER_IMAGE || true
    # Build the builder image {{{
    - docker build --pull --cache-from $CONTAINER_BUILDER_IMAGE --cache-from $RELEASE_CONTAINER_BUILDER_IMAGE -t $CONTAINER_BUILDER_IMAGE .
    - docker push $CONTAINER_BUILDER_IMAGE
    # }}}
    # Build the built image {{{
    - docker run -v $(readlink -f .):/app/site $CONTAINER_BUILDER_IMAGE gulp build --production
    - docker build -t $CONTAINER_BUILT_IMAGE -f Dockerfile.built .
    - docker push $CONTAINER_BUILT_IMAGE
    # }}}
# }}}

# Build the deploy image {{{
build_deploy_image:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CONTAINER_DEPLOY_IMAGE || docker pull $RELEASE_CONTAINER_DEPLOY_IMAGE || true
    - docker build --pull --cache-from $CONTAINER_DEPLOY_IMAGE --cache-from $RELEASE_CONTAINER_DEPLOY_IMAGE -t $CONTAINER_DEPLOY_IMAGE -f Dockerfile.deploy .
    - docker push $CONTAINER_DEPLOY_IMAGE
# }}}

# Ensure that all tests pass {{{
test_image:
  stage: test
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # Ensure Jekyll configuration is correct {{{
    - docker pull $CONTAINER_BUILDER_IMAGE
    - docker run -v $(readlink -f .):/app/site $CONTAINER_BUILDER_IMAGE bundle exec jekyll doctor -d _site
    # }}}

    # Ensure the generated site is correct {{{
    - docker pull $CONTAINER_BUILT_IMAGE
    - container_id=$(docker create $CONTAINER_BUILT_IMAGE echo)
    - docker cp $container_id:/site _site
    - docker rm $container_id
    - docker run -v $(readlink -f .):/app/site $CONTAINER_BUILDER_IMAGE bundle exec rake test
    # }}}
# }}}

review_deploy:
  image: $CONTAINER_DEPLOY_IMAGE
  stage: review
  script:
    # ensure we're in the directory with our capistrano configuration
    - cd /site
    # ensure that deployments can use the SSH key that is passed in via the
    # environment variables. Via https://docs.gitlab.com/ce/ci/ssh_keys/README.html
    - eval $(ssh-agent -s)
      # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo -e "$REVIEW_SSH_PRIVATE_KEY" > key
    - chmod 600 key
    - ssh-add key
    - cap review deploy
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: http://$CI_COMMIT_REF_SLUG.review.jvt.me
    on_stop: review_stop
  only:
    - branches
  variables:
    GIT_STRATEGY: none
  except:
    - master

review_stop:
  image: $CONTAINER_DEPLOY_IMAGE
  stage: review
  script:
    # ensure we're in the directory with our capistrano configuration
    - cd /site
    # ensure that deployments can use the SSH key that is passed in via the
    # environment variables. Via https://docs.gitlab.com/ce/ci/ssh_keys/README.html
    - eval $(ssh-agent -s)
      # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo -e "$REVIEW_SSH_PRIVATE_KEY" > key
    - chmod 600 key
    - ssh-add key
    - cap review stop
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  variables:
    GIT_STRATEGY: none
  when: manual
  only:
    - branches
  except:
    - master
# }}}

# Deploy to staging to get an early warning if deployment to production will
# fail {{{
staging_deploy:
  image: $CONTAINER_DEPLOY_IMAGE
  stage: deploy
  script:
    # ensure we're in the directory with our capistrano configuration
    - cd /site
    # ensure that deployments can use the SSH key that is passed in via the
    # environment variables. Via https://docs.gitlab.com/ce/ci/ssh_keys/README.html
    - eval $(ssh-agent -s)
      # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo -e "$SSH_PRIVATE_KEY" > key
    - chmod 600 key
    - ssh-add key
    - cap staging deploy
  environment:
    name: staging
    url: $STAGING_URL
  variables:
    GIT_STRATEGY: none
  only:
    - master
# }}}

# Push the image up to the registry as our latest image, on master {{{
release_builder_image:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull "$CONTAINER_BUILDER_IMAGE"
    - docker tag "$CONTAINER_BUILDER_IMAGE" "$RELEASE_CONTAINER_BUILDER_IMAGE"
    - docker push "$RELEASE_CONTAINER_BUILDER_IMAGE"
  variables:
    GIT_STRATEGY: none
  only:
    - master

release_built_image:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull "$CONTAINER_BUILT_IMAGE"
    - docker tag "$CONTAINER_BUILT_IMAGE" "$RELEASE_CONTAINER_BUILT_IMAGE"
    - docker push "$RELEASE_CONTAINER_BUILT_IMAGE"
  variables:
    GIT_STRATEGY: none
  only:
    - master

release_deploy_image:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull "$CONTAINER_DEPLOY_IMAGE"
    - docker tag "$CONTAINER_DEPLOY_IMAGE" "$RELEASE_CONTAINER_DEPLOY_IMAGE"
    - docker push "$RELEASE_CONTAINER_DEPLOY_IMAGE"
  variables:
    GIT_STRATEGY: none
  only:
    - master
# }}}

# Only master should auto deploy to production {{{
prod_deploy:
  image: $CONTAINER_DEPLOY_IMAGE
  stage: prod_deploy
  script:
    # ensure we're in the directory with our capistrano configuration
    - cd /site
    # ensure that deployments can use the SSH key that is passed in via the
    # environment variables. Via https://docs.gitlab.com/ce/ci/ssh_keys/README.html
    - apk --update add openssh-client
    - eval $(ssh-agent -s)
      # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo -e "$SSH_PRIVATE_KEY" > key
    - chmod 600 key
    - ssh-add key
    - cap production deploy
    - rake notify[$PRODUCTION_URL]
  environment:
    name: production
    url: $PRODUCTION_URL
  variables:
    GIT_STRATEGY: none
  only:
    - master
# }}}

