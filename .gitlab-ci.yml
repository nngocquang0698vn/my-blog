image: docker:latest
services:
  - docker:dind

variables:
  CONTAINER_IMAGE_BASE_URL: registry.gitlab.com/jamietanna/jvt.me
  CONTAINER_BUILT_IMAGE: $CONTAINER_IMAGE_BASE_URL:$CI_COMMIT_REF_SLUG
  CONTAINER_TEST_IMAGE: $CONTAINER_IMAGE_BASE_URL/test:$CI_COMMIT_REF_SLUG
  CONTAINER_DEPLOY_IMAGE: $CONTAINER_IMAGE_BASE_URL/deploy:$CI_COMMIT_REF_SLUG
  RELEASE_CONTAINER_BUILT_IMAGE: $CONTAINER_IMAGE_BASE_URL:latest
  RELEASE_CONTAINER_TEST_IMAGE: $CONTAINER_IMAGE_BASE_URL/test:latest
  RELEASE_CONTAINER_DEPLOY_IMAGE: $CONTAINER_IMAGE_BASE_URL/deploy:latest
  DOCKER_DRIVER: overlay
  DOCKER_BASE_IMAGE: alpine:3.5
  URL_PRODUCTION: https://www.jvt.me
  URL_STAGING: https://www.staging.jvt.me
  URL_REVIEW_SUFFIX: www.review.jvt.me
  GIT_SUBMODULE_STRATEGY: normal

stages:
  - build
  - review
  - test
  - staging
  - release
  - production
  - notify

# Ensure that the site builds {{{
build_site:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # pull the latest base image on a master build
    - docker build -t $CONTAINER_BUILT_IMAGE .
    - docker push $CONTAINER_BUILT_IMAGE
    # }}}
# }}}

build_test_image:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CONTAINER_TEST_IMAGE -f Dockerfile.test .
    - docker push $CONTAINER_TEST_IMAGE

# Build the deploy image {{{
build_deploy_image:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CONTAINER_DEPLOY_IMAGE || docker pull $RELEASE_CONTAINER_DEPLOY_IMAGE || true
    - docker build --pull --cache-from $CONTAINER_DEPLOY_IMAGE --cache-from $RELEASE_CONTAINER_DEPLOY_IMAGE -t $CONTAINER_DEPLOY_IMAGE -f Dockerfile.deploy .
    - docker push $CONTAINER_DEPLOY_IMAGE
# }}}

# Ensure that all tests pass {{{
test_image:
  stage: test
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CONTAINER_TEST_IMAGE
    # Ensure collections are formed correctly {{{
    - docker run -v $(readlink -f .):/app/site $CONTAINER_TEST_IMAGE bundle exec rake validate
    # }}}

    # Get the generated site content {{{
    - docker pull $CONTAINER_BUILT_IMAGE
    - container_id=$(docker create $CONTAINER_BUILT_IMAGE echo)
    - docker cp $container_id:/site public
    - docker rm $container_id
    # }}}

    # Ensure the generated site is correct {{{
    - docker run -v $(readlink -f .):/app/site $CONTAINER_TEST_IMAGE bundle exec rake test
    # }}}
# }}}

# Review Apps {{{
review_deploy:
  image: $CONTAINER_DEPLOY_IMAGE
  stage: review
  script:
    # ensure we're in the directory with our capistrano configuration
    - cd /site
    # ensure that deployments can use the SSH key that is passed in via the
    # environment variables. Via https://docs.gitlab.com/ce/ci/ssh_keys/README.html
    - eval $(ssh-agent -s)
      # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo -e "$REVIEW_SSH_PRIVATE_KEY" > key
    - chmod 600 key
    - ssh-add key
    - cap review deploy
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$CI_COMMIT_REF_SLUG.$URL_REVIEW_SUFFIX
    on_stop: review_stop
  only:
    - branches
  variables:
    GIT_STRATEGY: none
  except:
    - master

review_stop:
  image: $CONTAINER_DEPLOY_IMAGE
  stage: review
  script:
    # ensure we're in the directory with our capistrano configuration
    - cd /site
    # ensure that deployments can use the SSH key that is passed in via the
    # environment variables. Via https://docs.gitlab.com/ce/ci/ssh_keys/README.html
    - eval $(ssh-agent -s)
      # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo -e "$REVIEW_SSH_PRIVATE_KEY" > key
    - chmod 600 key
    - ssh-add key
    - cap review stop
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  variables:
    GIT_STRATEGY: none
  when: manual
  only:
    - branches
  except:
    - master
# }}}

# Staging {{{
staging_deploy:
  image: $CONTAINER_DEPLOY_IMAGE
  stage: staging
  script:
    # ensure we're in the directory with our capistrano configuration
    - cd /site
    # ensure that deployments can use the SSH key that is passed in via the
    # environment variables. Via https://docs.gitlab.com/ce/ci/ssh_keys/README.html
    - eval $(ssh-agent -s)
      # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo -e "$STAGING_SSH_PRIVATE_KEY" > key
    - chmod 600 key
    - ssh-add key
    - cap staging deploy
  environment:
    name: staging
    url: $URL_STAGING
  variables:
    GIT_STRATEGY: none
  only:
    - master
# }}}
# }}}

# Push the image up to the registry as our latest image, on master {{{
release_built_image:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull "$CONTAINER_BUILT_IMAGE"
    - docker tag "$CONTAINER_BUILT_IMAGE" "$RELEASE_CONTAINER_BUILT_IMAGE"
    - docker push "$RELEASE_CONTAINER_BUILT_IMAGE"
  variables:
    GIT_STRATEGY: none
  only:
    - master

release_deploy_image:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull "$CONTAINER_DEPLOY_IMAGE"
    - docker tag "$CONTAINER_DEPLOY_IMAGE" "$RELEASE_CONTAINER_DEPLOY_IMAGE"
    - docker push "$RELEASE_CONTAINER_DEPLOY_IMAGE"
  variables:
    GIT_STRATEGY: none
  only:
    - master

release_test_image:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull "$CONTAINER_TEST_IMAGE"
    - docker tag "$CONTAINER_TEST_IMAGE" "$RELEASE_CONTAINER_TEST_IMAGE"
    - docker push "$RELEASE_CONTAINER_TEST_IMAGE"
  variables:
    GIT_STRATEGY: none
  only:
    - master

# }}}

# Production {{{
prod_deploy:
  image: $CONTAINER_DEPLOY_IMAGE
  stage: production
  script:
    # ensure we're in the directory with our capistrano configuration
    - cd /site
    # ensure that deployments can use the SSH key that is passed in via the
    # environment variables. Via https://docs.gitlab.com/ce/ci/ssh_keys/README.html
    - eval $(ssh-agent -s)
      # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - echo -e "$PRODUCTION_SSH_PRIVATE_KEY" > key
    - chmod 600 key
    - ssh-add key
    - cap production deploy
  environment:
    name: production
    url: $URL_PRODUCTION
  variables:
    GIT_STRATEGY: none
  only:
    - master

prod_netlify_deploy:
  image: docker
  stage: production
  script:
    # Get the generated site content {{{
    - docker pull $CONTAINER_BUILT_IMAGE
    - container_id=$(docker create $CONTAINER_BUILT_IMAGE echo)
    - docker cp $container_id:/site public
    - docker rm $container_id
    # }}}
    - apk add --update curl
    - curl https://github.com/netlify/netlifyctl/releases/download/v0.4.0/netlifyctl-linux-amd64-0.4.0.tar.gz -LO
    - tar xvf netlifyctl-linux-amd64-0.4.0.tar.gz
    - ./netlifyctl deploy -s fa4dd95a-994e-4f89-8a7a-2d9e9fc36a32 -P public -A $NETLIFY_ACCESS_TOKEN
  variables:
    GIT_STRATEGY: none
  only:
    - master
# }}}

notify:
  image: $CONTAINER_TEST_IMAGE
  stage: notify
  script:
    - rake notify[$URL_PRODUCTION]
    - rake notify:pushbullet
  only:
    - master
